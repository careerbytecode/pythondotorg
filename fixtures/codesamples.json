[
  {
    "model": "codesamples.codesample",
    "fields": {
      "copy_markup_type": "html",
      "code": "<pre><code><span class=\"comment\"># Simple output (with Unicode)</span>\r\n>>> print(\"Hello, I'm Python!\")\r\n<span class=\"output\">Hello, I'm Python!</span>\r\n\r\n<span class=\"comment\"># Input, assignment</span>\r\n>>> name = input('What is your name?\\n')\r\n>>> print('Hi, %s.' % name)\r\n<span class=\"output\">What is your name?\r\nPython\r\nHi, Python.</span></code></pre>",
      "_copy_rendered": "<h1>Quick &amp; Easy to Learn</h1>\r\n                        <p>Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. <a href=\"http://docs.python.org/3.3/tutorial/\">Whet your appetite</a> with our Python overview.</p>\r\n",
      "is_published": true,
      "copy": "<h1>Quick &amp; Easy to Learn</h1>\r\n                        <p>Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. <a href=\"http://docs.python.org/3.3/tutorial/\">Whet your appetite</a> with our Python overview.</p>\r\n",
      "updated": "2014-02-20T18:04:27.862Z",
      "created": "2014-02-20T18:04:27.861Z",
      "_code_rendered": "<pre><code><span class=\"comment\"># Simple output (with Unicode)</span>\r\n>>> print(\"Hello, I'm Python!\")\r\n<span class=\"output\">Hello, I'm Python!</span>\r\n\r\n<span class=\"comment\"># Input, assignment</span>\r\n>>> name = input('What is your name?\\n')\r\n>>> print('Hi, %s.' % name)\r\n<span class=\"output\">What is your name?\r\nPython\r\nHi, Python</span></code></pre>",
      "code_markup_type": "html"
    },
    "pk": 1
  },
  {
    "model": "codesamples.codesample",
    "fields": {
      "copy_markup_type": "html",
      "code": "<pre><code><span class=\"comment\"># Simple arithmetic</span>\r\n>>> 1 / 2\r\n<span class=\"output\">0.5</span>\r\n>>> 2 ** 3\r\n<span class=\"output\">8</span>\r\n>>> 17 / 3  <span class=\"comment\"># classic division returns a float</span>\r\n<span class=\"output\">5.666666666666667</span>\r\n>>> 17 // 3  <span class=\"comment\"># floor division</span>\r\n<span class=\"output\">5</span></code></pre>",
      "_copy_rendered": "<h1>Intuitive Interpretation</h1>\r\n                        <p>Calculations are simple with Python, and expression syntax is straightforward: the operators <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> work as expected; parentheses <code>()</code> can be used for grouping. <a href=\"http://docs.python.org/3.3/tutorial/introduction.html#using-python-as-a-calculator\">More about simple math functions</a>.</p>",
      "is_published": true,
      "copy": "<h1>Intuitive Interpretation</h1>\r\n                        <p>Calculations are simple with Python, and expression syntax is straightforward: the operators <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> work as expected; parentheses <code>()</code> can be used for grouping. <a href=\"http://docs.python.org/3.3/tutorial/introduction.html#using-python-as-a-calculator\">More about simple math functions</a>.</p>",
      "updated": "2014-02-20T18:05:47.979Z",
      "created": "2014-02-20T18:05:45.965Z",
      "_code_rendered": "<pre><code><span class=\"comment\"># Simple arithmetic</span>\r\n>>> 1 / 2\r\n<span class=\"output\">0.5</span>\r\n>>> 2 ** 3\r\n<span class=\"output\">8</span>\r\n>>> 17 / 3  <span class=\"comment\"># classic division returns a float</span>\r\n<span class=\"output\">5.666666666666667</span>\r\n>>> 17 // 3  <span class=\"comment\"># floor division</span>\r\n<span class=\"output\">5</span></code></pre>",
      "code_markup_type": "html"
    },
    "pk": 2
  },
  {
    "model": "codesamples.codesample",
    "fields": {
      "copy_markup_type": "html",
      "code": "<pre><code><span class=\"comment\"># List comprehensions</span>\r\n>>> fruits = ['Banana', 'Apple', 'Lime']\r\n>>> loud_fruits = [fruit.upper() for fruit in fruits]\r\n>>> print(loud_fruits)\r\n<span class=\"output\">['BANANA', 'APPLE', 'LIME']</span>\r\n\r\n<span class=\"comment\"># List and the enumerate function</span>\r\n>>> list(enumerate(fruits))\r\n<span class=\"output\">[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]</span></code></pre>",
      "_copy_rendered": "<h1>Compound Data Types</h1>\r\n                        <p>Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. <a href=\"http://docs.python.org/3.3/tutorial/introduction.html#lists\">More about lists</a></p>",
      "is_published": true,
      "copy": "<h1>Compound Data Types</h1>\r\n                        <p>Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. <a href=\"http://docs.python.org/3.3/tutorial/introduction.html#lists\">More about lists</a></p>",
      "updated": "2014-02-20T18:06:09.903Z",
      "created": "2014-02-20T18:06:09.903Z",
      "_code_rendered": "<pre><code><span class=\"comment\"># List comprehensions</span>\r\n>>> fruits = ['Banana', 'Apple', 'Lime']\r\n>>> loud_fruits = [fruit.upper() for fruit in fruits]\r\n>>> print(loud_fruits)\r\n<span class=\"output\">['BANANA', 'APPLE', 'LIME']</span>\r\n\r\n<span class=\"comment\"># List and the enumerate function</span>\r\n>>> list(enumerate(fruits))\r\n<span class=\"output\">[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]</span></code></pre>",
      "code_markup_type": "html"
    },
    "pk": 3
  },
  {
    "model": "codesamples.codesample",
    "fields": {
      "copy_markup_type": "html",
      "code": "<pre><code><span class=\"comment\"># For loop on a list</span>\r\n>>> a_list = [2, 4, 6, 8]\r\n>>> sum = 0\r\n>>> for num in a_list:\r\n>>>     sum = sum + num\r\n>>> print(\"The sum is:\", sum)\r\n<span class=\"output\">The sum is: 20</span></code></pre>",
      "_copy_rendered": "<h1>All the Flow You&rsquo;d Expect</h1>\r\n                        <p>Python knows the usual control flow statements that other languages speak &mdash; <code>if</code>, <code>for</code>, <code>while</code> and <code>range</code> &mdash; with some of it own twists, of course. <a href=\"http://docs.python.org/3.3/tutorial/controlflow.html\">More control flow tools</a></p>",
      "is_published": true,
      "copy": "<h1>All the Flow You&rsquo;d Expect</h1>\r\n                        <p>Python knows the usual control flow statements that other languages speak &mdash; <code>if</code>, <code>for</code>, <code>while</code> and <code>range</code> &mdash; with some of its own twists, of course. <a href=\"http://docs.python.org/3.3/tutorial/controlflow.html\">More control flow tools</a></p>",
      "updated": "2014-02-20T18:06:25.630Z",
      "created": "2014-02-20T18:06:25.629Z",
      "_code_rendered": "<pre><code><span class=\"comment\"># For loop on a list</span>\r\n>>> a_list = [2, 4, 6, 8]\r\n>>> sum = 0\r\n>>> for num in a_list:\r\n>>>     sum = sum + num\r\n>>> print(\"The sum is:\", sum)\r\n<span class=\"output\">The sum is: 20</span></code></pre>",
      "code_markup_type": "html"
    },
    "pk": 4
  },
  {
    "model": "codesamples.codesample",
    "fields": {
      "copy_markup_type": "html",
      "code": "<pre><code><span class=\"comment\"># Write Fibonacci series up to n</span>\r\n>>> def fib(n):\r\n>>>     a, b = 0, 1\r\n>>>     while a &lt; n:\r\n>>>         print(a, end=' ')\r\n>>>         a, b = b, a+b\r\n>>>     print()\r\n>>> fib(1000)\r\n<span class=\"output\">0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610</span></code></pre>",
      "_copy_rendered": "<h1>Functions Defined</h1>\r\n                        <p>The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. <a href=\"http://docs.python.org/3.3/tutorial/controlflow.html#defining-functions\">More about defining functions</a></p>",
      "is_published": true,
      "copy": "<h1>Functions Defined</h1>\r\n                        <p>The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. <a href=\"http://docs.python.org/3.3/tutorial/controlflow.html#defining-functions\">More about defining functions</a></p>",
      "updated": "2014-02-20T18:07:44.264Z",
      "created": "2014-02-20T18:07:44.263Z",
      "_code_rendered": "<pre><code><span class=\"comment\"># Write Fibonacci series up to n</span>\r\n>>> def fib(n):\r\n>>>     a, b = 0, 1\r\n>>>     while a &lt; n:\r\n>>>         print(a, end=' ')\r\n>>>         a, b = b, a+b\r\n>>>     print()\r\n>>> fib(1000)\r\n<span class=\"output\">0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610</span></code></pre>",
      "code_markup_type": "html"
    },
    "pk": 5
  }
]
